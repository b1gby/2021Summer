
<style>

</style>

<template>
<form @submit="formSubmit">
    <view class="flex bg-white align-center padding">
        <view class="padding flex-sub">
        </view>
        <view class="padding flex-sub text-center text-black text-lg text-bold">
            注册
        </view>
        <view class="padding flex-sub text-right">

        </view>
    </view>

	<view class="cu-form-group">
		<view class="title">用户名</view>
		<input name="Sname" placeholder="请输入登录账号"></input>
	</view>

	<view class="cu-form-group">
		<view class="title">昵称</view>
		<input name="Snickname" placeholder="请输入昵称(可使用姓名)"></input>
	</view>

    <view class="cu-form-group">
		<view class="title">密码</view>
		<input name="Spassword" password placeholder="请输入密码"></input>
	</view>

    <view class="cu-form-group">
		<view class="title">确认密码</view>
		<input name="SpasswordAgain" password placeholder="请再次输入密码"></input>
	</view>

    <view class="cu-form-group">
		<view class="title">手机号码</view>
		<input name="Sphone" type="number" placeholder="请输入手机号"></input>
	</view>

	<view class="bg-white" style='border: 1rpx solid #eee; border-width: 1rpx 0'>
		<image-list
			:imageList.sync='imageList'
			maxSize='1'
			@imageListChange.user='onImageListChange'
			type="add"
			title='头像'
		></image-list>
	</view>

    <view class="cu-form-group">
		<view class="title">年级</view>
        <picker bindchange="pickerGradeChange" name="SgradeName" value="{{gradePicker[gradeIndex]}}" range="{{gradePicker}}">
			<view class="picker">
				<text class="text-lg">{{gradeIndex?gradePicker[gradeIndex]:gradePicker[0]}}</text>
			</view>
		</picker>
	</view>

	<view class="cu-form-group">
		<view class="title">校区</view>
		<picker bindchange="pickerCampusChange" name="Cid" range-key="Cname" value="{{campusIndex}}" range="{{campusList}}">
			<view class="picker">
				<text class="text-lg">{{campusList[campusIndex].Cname}}</text>
			</view>
		</picker>
	</view>

    <view class="cu-form-group">
        校区请与老师确认，确定后只能联系教师修改
    </view>

    <view class="padding flex justify-center bg-white">
        <button class="cu-btn bg-green shadow lg" form-type="submit">添加学生</button>
    </view>
</form>
</template>

<script>
import wepy from 'wepy'
import WxValidate from "../utils/WxValidate"
import { gradeRange } from '@/common/constant';
import ImageList from '@/components/image-list';
import { uploadImageList } from '@/common/uploadFile';
export default class Student extends wepy.page{
    data={
        imageList: [],
        gradePicker: gradeRange,
        gradeIndex:0,
        campusList:[],
        campusIndex: "0",
    }

	components = {
		'image-list': ImageList,
	};

    methods= {

		onImageListChange(imageList){
			this.imageList = [...imageList];
		},

        pickerGradeChange(e){
            this.gradeIndex = e.detail.value
        },

        pickerCampusChange(e){
            this.campusIndex = e.detail.value
        },

        async formSubmit(e) {

            let self = this

            let successUp = 0; //成功
            let failUp = 0; //失败
            let count = 0; //第几张

            let sendFormData = e.detail.value // form 表单数据
            if (!self.WxValidate.checkForm(sendFormData)) {
                //表单元素验证不通过，此处给出相应提示
                let error = self.WxValidate.errorList[0];
                wx.showToast({
                            title: error.msg, //提示的内容,
                            icon: 'none', //图标,
                            mask: true, //显示透明蒙层，防止触摸穿透,
                            success: res => {}
                            });
                    return false;
            }
			if(!new RegExp("^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$").test(sendFormData.Spassword)){
				wx.showModal({
					title: "密码格式错误",
					content: "密码必须为6~16位中文和数字的组合", //提示的内容,
					showCancel: false,
				});
				return false;
			}
			if(sendFormData.Spassword !== sendFormData.SpasswordAgain){
				wx.showToast({
					title: "两次密码输入不相同", //提示的内容,
					icon: 'none', //图标,
					mask: true, //显示透明蒙层，防止触摸穿透,
				});
				return false;
			}

			let length = this.imageList.length; //总数

			if(length > 0){
				wx.showLoading({
					title: `图片答案上传中`,
				})
				const { imageUrlList, failedImageList } = await uploadImageList(this.imageList, "/avatar");
				wx.hideLoading()
				if(failedImageList.length !== 0){
					wx.showModal({
						showCancel: false,
						content: `头像上传失败，请重试`,
					})
					return;
				}else{
					sendFormData['Sicon'] = imageUrlList[0];
				}
			}
			sendFormData['Cid'] = Number(this.campusList[sendFormData['Cid']]['Cid']);
            wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/login/register_student',
                method:'POST',
                data: sendFormData,
                header: wepy.$instance.setHeader(),
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        wx.showToast({
                              title: '注册成功', //提示的内容,
                              icon: 'success', //图标,
                              mask: true, //显示透明蒙层，防止触摸穿透,
                            });

                        setTimeout(function(){
                            wepy.navigateBack({
                                delta: 1
                            })
                        }, 1000)
                    } else if(res.data.Code == 2){
						wx.showModal({
							title: '注册失败',
							content: res.data.Msg,
							showCancel: false,
						})
                    }
                }
            })
        },
    }

    initValidate() {
        let rules = {
            Sname: {
                required: true,
                maxlength: 16,
            },
            Snickname: {
                required: true,
                maxlength: 16,
            },
            Sphone: {
                required: true,
                tel: true
            },
			Spassword:{
				required: true,
				maxlength: 16,
			}
        }

        let message = {
			Sname: {
				required: '请输入您的用户名',
				maxlength: '用户名不能超过16个字'
			},
            Snickname: {
                required: '请输入您的昵称',
                maxlength: '昵称不能超过16个字'
            },
            Sphone: {
                required: '请输入您的手机号',
                tel: '请输入正确的手机号'
            },
			Spassword:{
				required: '请输入密码',
				maxlength: '密码不能超过16个字符'
			}
        }
        //实例化当前的验证规则和提示消息
        this.WxValidate = new WxValidate(rules, message);
    }

    getCampusData() {
        let self = this

        wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/login/get_campus_list',
                method:'GET',
                header: wepy.$instance.setHeader(),

                success: function(res) {
                    if (res.data.Code == 1){
                        self.campusList = res.data.Data
                        self.$apply()
                    }
                }
            })
    }

    // 递归方式上传多张图片
    recursionImgUpload(self,imgPaths, successUp, failUp, count, length){
        wepy.uploadFile({
            url: wepy.$instance.globalData.serverUrl + '/app/file/upload_file', //开发者服务器 url
            header: wepy.$instance.setHeader(),
            filePath: imgPaths[count], //要上传文件资源的路径
            name: 'uploadFile', //文件对应的 key , 开发者在服务器端通过这个 key 可以获取到文件二进制内容
            formData:{
                dirName:"images/user_avatar"
            },
            header: {
                'content-type': 'multipart/form-data'
            },
            success(e){
                if (e.data.Code==1){
                    console.log("上传成功第" + count + "张")
                }
                successUp++;//成功+1
            },
            fail(e){
                failUp++;//失败+1
            },
            complete(e){

                count++;
                if(count == length) {
                    console.log("上传成功")
                }else{
                    self.recursionImgUpload(self,imgPaths,successUp, failUp, count, length)
                }
            }
        });

    }

    onLoad() {
        let self = this
        self.getCampusData()
        self.initValidate();
    }

}
</script>
