<!-- wrongproblem.wpy -->
<style lang="less">
page {
  width: 100vw;
  overflow: hidden;
}

.exercise_item{
    padding:20rpx;
    border: grey solid 1rpx;
}

.exercise_upper{
    display: flex;
    flex-direction: row;
    align-items: center; 
       
}

.title{
    overflow:hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 360rpx;
}

.grade{
    margin: 20rpx;    
}

.tab-bar-title__selected {
    font-size: 20px;
    font-weight: bold;
}

.weui-tabs-swiper {
    width: 100%;
    height: 100px;
}

.DrawerPage {
  position: fixed;
  width: 100vw;
  height: 100vh;
  left: 0vw;
  background-color: #f1f1f1;
  transition: all 0.4s;
}

.DrawerPage.show {
  transform: scale(0.9, 0.9);
  left: 85vw;
  box-shadow: 0 0 60rpx rgba(0, 0, 0, 0.2);
  transform-origin: 0;
}

.DrawerWindow {
  background-color: white;
  position: absolute;
  width: 85vw;
  height: 100vh;
  left: 0;
  top: 0;
  transform: scale(0.9, 0.9) translateX(-100%);
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerWindow.show {
  transform: scale(1, 1) translateX(0%);
  opacity: 1;
  pointer-events: all;
}

.DrawerClose {
  position: absolute;
  width: 40vw;
  height: 100vh;
  right: 0;
  top: 0;
  color: transparent;
  padding-bottom: 30rpx;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.01), rgba(0, 0, 0, 0.6));
  letter-spacing: 5px;
  font-size: 50rpx;
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerClose.show {
  opacity: 1;
  pointer-events: all;
  width: 15vw;
  color: #fff;
}

.DrawerPage .cu-bar.tabbar .action button.icon {
  width: 64rpx;
  height: 64rpx;
  line-height: 64rpx;
  margin: 0;
  display: inline-block;
}

.DrawerPage .cu-bar.tabbar .action .cu-avatar {
  margin: 0;
}

.DrawerPage .nav {
  flex: 1;
}

.DrawerPage .nav .cu-item.cur {
  border-bottom: 0;
  position: relative;
}

.DrawerPage .nav .cu-item.cur::after {
  content: "";
  width: 10rpx;
  height: 10rpx;
  background-color: currentColor;
  position: absolute;
  bottom: 10rpx;
  border-radius: 10rpx;
  left: 0;
  right: 0;
  margin: auto;
}

.DrawerPage .cu-bar.tabbar .action {
  flex: initial;
}

.DeleteButton{
    color: red;
}

</style>

<template>
<scroll-view scroll-y class="DrawerPage {{modalName=='viewModal'?'show':''}}">
    <view class="flex bg-white">
        <view class="padding flex-sub text-left" @tap="onClickCreateWrongProblem">
            添加错题
        </view>
        <view class="padding flex-sub text-center text-black text-lg text-bold" @tap="onClickWrongProblem">
            错题列表
        </view>
        <view class="padding flex-sub text-right">
            批量操作
        </view>
    </view>
    <view class="cu-bar search bg-white">
        <view class="search-form round">
            <text class="cuIcon-search"></text>
            <input type="text" placeholder="搜索题目" confirm-type="search"></input>
        </view>
        <view class="action">
            <button class="cu-btn bg-green shadow-blur round">搜索</button>
        </view>
    </view>

    <view class="cu-card">
        <view class="cu-item shadow radius  bg-grey">
            <view class="flex align-center">
                <image class="cu-avatar round margin" src="{{ student.Sicon?imgUrl + student.Sicon:'' }}" background-size="cover"></image>
                <view class="margin">
                    <view class="text-black text-lg text-bold">{{ student.Snickname }}</view>
                </view>        
            </view>
            
            <view class="flex padding">
                <view class="flex-sub text-black text-sm">年级：{{ student.SgradeName }}</view>
                <view class="flex-sub text-black text-sm">校区：{{ student.Cname }}</view>
            </view>
        </view>
    </view>
    
    <view class="justify-between flex bg-white">
        <scroll-view class="bg-white nav" scroll-x scroll-with-animation style="width:90vw">
            <view class="cu-item {{index==screenCur.subjectCur?'text-orange cur':''}}" wx:for="{{exerciseField.Esubject}}" wx:key wx:for-item="item" @tap="tabSelectIndex" data-id="{{index}}" data-name="subject">
                {{item}}
            </view>
        </scroll-view>
        <image class="bg-white margin" style="width:40rpx;height:40rpx" src="{{imageScreen}}" @tap="showModal" data-target="viewModal"/>
    </view>
    


    <view wx:for="{{wrongProblemList}}" wx:key="index" wx:for-item="wrongProblem" data-id="{{index}}" @tap="onClickWrongProblem">
        <mp-slideview buttons="{{slideButtons}}" icon="{{true}}" bindbuttontap="slideButtonTap" data-index="{{index}}">
            
        <view class="padding-left padding-right bg-white solid-bottom" >
            <view class="flex p-xs mb-sm">
                <!-- 左半边 -->
                <view class="flex-treble padding-sm">
                    <!-- 里面两行，上面行 -->
                    <view class="exercise_upper">
                        <!-- 题目难度标签 -->
                        <view class="cu-tag radius bg-{{difficultyColor[wrongProblem.Wdifficulty]}} light margin-right-xs">
                            {{wrongProblem.Wdifficulty}}
                        </view>
                        <!-- 题目title -->
                        <view class="title margin-lr-xs">
                            {{wrongProblem.Wtitle}}
                        </view>
                        
                    </view>

                    <!-- 下面行 -->
                    <view class="flex">
                        <view class="margin-right-xs">
                            {{wrongProblem.Wsubject}}
                        </view>
                        <view class="margin-lr-xs">
                            {{wrongProblem.Wtype}}
                        </view>
                    </view>
                </view>
                <!-- 右半边 -->
                <view class="flex-sub padding-sm">
                    <view class="text-center">
                        {{wrongProblem.Wgrade}}
                    </view>
                </view>
            </view>
        </view>
        </mp-slideview>
    </view>
</scroll-view>

<mp-dialog title="删除错题" show="{{dialogShow}}" bindbuttontap="tapDeleteDialogButton" buttons="{{buttons}}">
      <view>确定要删除此错题吗？</view>
</mp-dialog>

<view class="DrawerClose {{modalName=='viewModal'?'show':''}}" @tap="hideModal">
    <text class="cuIcon-pullright"></text>
</view>

<scroll-view scroll-y class="DrawerWindow {{modalName=='viewModal'?'show':''}}">
    <view class="flex padding">
        <view class="flex-sub padding">重置</view>
        <view class="flex-sub padding text-center" style="font-weight:bold">筛选错题</view>
        <view class="flex-sub padding text-right" style="color:blue" @tap="hideModal">完成</view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">年级</view>
        <view class="grid col-{{exerciseField.Egrade.length>3?3:exerciseField.Egrade.length}} margin text-center">
            <view  wx:for="{{exerciseField.Egrade}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.gradeCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="grade" data-id="{{index}}">{{exerciseField.Egrade[index]}}</button>
            </view>
        </view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">错题难度</view>
        <view class="grid col-{{exerciseField.Edifficulty.length>4?4:exerciseField.Edifficulty.length}} margin text-center">
            <view  wx:for="{{exerciseField.Edifficulty}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.difficultyCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="difficulty" data-id="{{index}}">{{exerciseField.Edifficulty[index]}}</button>
            </view>
        </view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">错题类型</view>
        <view class="margin">学科</view>
        <view class="grid col-{{exerciseField.Esubject.length>4?4:exerciseField.Esubject.length}} margin text-center">
            <view  wx:for="{{exerciseField.Esubject}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.subjectCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="subject" data-id="{{index}}">{{exerciseField.Esubject[index]}}</button>
            </view>
        </view>
        <view class="margin">题型</view>
        <view class="grid margin text-center col-{{exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]].length>3?3:exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]].length}}">
            <view  wx:for="{{exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]]}}" wx:key wx-for-item="item">
                <button class="round cu-btn lines-{{screenCur.typeCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="type" data-id="{{index}}">{{item}}</button>
            </view>
        </view>
        <view class="margin">单元</view>
        <view class="grid margin text-center col-{{exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]].length>3?3:exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]].length}}">
            <view  wx:for="{{exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]]}}" wx:key wx-for-item="item">
                <button class="round cu-btn lines-{{screenCur.unitCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="unit" data-id="{{index}}">{{item}}</button>
            </view>
        </view>
    </view>
</scroll-view>

</template>

<script>
import wepy from 'wepy'
export default class Index extends wepy.page{
    config = {
        "usingComponents": {
            "mp-slideview": "weui-miniprogram/slideview/slideview",
            "mp-dialog": "/miniprogram_npm/weui-miniprogram/dialog/dialog",
        }
    }

    data={
        Sid : -1,
        student: {},
        wrongProblemList : null,
        exerciseField : null,
        activeTab: 0,
        screenCur: {
            subjectCur: 0,
            difficultyCur: 0,
            typeCur:0,
            gradeCur: 0,
            unitCur: 0,
        },
        difficultyColor:{
            "简单":"cyan",
            "中等":"olive",
            "困难":"pink",
            "竞赛":"black",
        },

        imageScreen:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=icon/screen.png',
        modalName : "",
        slideButtons: [{
                type: 'warn',
                src:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=icon/del.png',
            }],
        buttons: [{
                text: '取消',
            },{
                text: '确定',
                extClass: 'DeleteButton',
            }],
        dialogShow: false,
        deleteIndex:-1,
        imgUrl:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=',
    }

    methods={
        onTabClick(e) {
            let self = this
            let index = e.detail.index
            self.activeTab= index
        },

        onTabChange(e) {
            let self = this
            let index = e.detail.index
            self.activeTab= index
        },

        tabSelectIndex(e){
            let self = this
            self.screenCur[e.currentTarget.dataset.name+"Cur"]= e.currentTarget.dataset.id
            self.getSortedWrongProblem(self)
        },

        tabSelect(e) {
            let self = this
            self.screenCur[e.currentTarget.dataset.name+"Cur"]= e.currentTarget.dataset.id
        },

        showModal(e) {
            let self = this
            self.modalName= e.currentTarget.dataset.target
        },

        hideModal(e) {
            let self = this
            self.modalName= null
            self.getSortedWrongProblem()
        },

        slideButtonTap(e) {
            let self = this
            self.deleteIndex = e.currentTarget.dataset.index
            self.dialogShow = true
        },

        tapDeleteDialogButton(e) {
            let self = this
            self.dialogShow = false
            if (e.detail.index == 1) {
                self.deleteWrongProblem()
            }
        },

        onClickWrongProblem(e) {
            let self = this
            let exerciseIndex = e.currentTarget.dataset.id
            wx.navigateTo({
                url:"wrongproblem-detail?wid="+self.wrongProblemList[exerciseIndex].Wid + "&sname="+self.student.Snickname,
                
            })
        },

        onClickCreateWrongProblem(e) {
            let self = this
            wx.navigateTo({
                url:"create-wrongproblem?sid="+self.Sid,
            })
        },
    }

    getWrongProblem() {
        let self = this
        wepy.request({
            url:wepy.$instance.globalData.serverUrl + '/app/wrong_problem/get_wrong_problem_list',
            method:'GET',
            data:{
                Sid:self.Sid
            },
            header: wepy.$instance.setHeader(),
            success: function(res) {
                console.log(res)
                if (res.data.Code == 1){
                    self.wrongProblemList = res.data.Data
                    self.$apply()
                }
            }
        })
    }

    getExerciseField() {
        let self = this
        wepy.request({
            url:wepy.$instance.globalData.serverUrl + '/app/user/common/get_exercise_field',
            method:'GET',
            header: wepy.$instance.setHeader(),
            success: function(res) {
                console.log(res)
                if (res.data.Code == 1){
                    self.exerciseField = res.data.Data
                    self.$apply()
                }
            }
        })
    }

    getSortedWrongProblem() {
        let self = this
        wepy.request({
            url:wepy.$instance.globalData.serverUrl + '/app/wrong_problem/get_sorted_wrong_problem',
            method:'GET',
            header: wepy.$instance.setHeader(),
            data:{
                Sid: self.Sid,
                subject:self.exerciseField.Esubject[self.screenCur.subjectCur],
                type:self.exerciseField.Etype[self.exerciseField.Esubject[self.screenCur.subjectCur]][self.screenCur.typeCur],
                unit:self.exerciseField.Eunit[self.exerciseField.Esubject[self.screenCur.subjectCur]][self.screenCur.unitCur],
                difficulty:self.exerciseField.Edifficulty[self.screenCur.difficultyCur],
                grade:self.exerciseField.Egrade[self.screenCur.gradeCur],
            },
            success: function(res) {
                if (res.data.Code == 1){
                    self.wrongProblemList = res.data.Data
                    self.$apply()
                }
            }
        })
    }

    deleteWrongProblem() {
        let self = this
        if(self.deleteIndex == -1) return
        wepy.request({
            url:wepy.$instance.globalData.serverUrl + '/app/wrong_problem/delete_wrong_problem/:id' + '?Wid=' + self.wrongProblemList[self.deleteIndex].Wid.toString(),
            method:'DELETE',
            header: wepy.$instance.setHeader(),
            success: function(res) {
                console.log(res)
                if (res.data.Code == 1){
                    wx.showToast({
                        title:'删除成功'
                    })
                    self.getWrongProblem()
                    self.getExerciseField()
                }
            }
        })
    }

    getStudentData() {
        let self = this
        wepy.request({
            url:wepy.$instance.globalData.serverUrl + '/app/student/get_student',
            method:'GET',
            header: wepy.$instance.setHeader(),
            data:{
                Sid:self.Sid
            },
            success: function(res) {
                console.log(res)
                if (res.data.Code == 1){
                    self.student = res.data.Data
                    self.$apply()
                }
            }
        })
    }

    onLoad(options) {
        let self = this
        console.log(options)

        self.Sid = options.sid
    }

    onShow(options) {
        let self = this
        self.getWrongProblem()
        self.getExerciseField()
        self.getStudentData()
        
    }
}
</script>
