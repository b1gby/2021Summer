<!-- exercise.wpy -->

<style lang='less'>
page {
	background-color: white;
}

.titlePassBtn {
	margin-top: 20 rpx;
}

.input {
	width: 70%;
}

.submitBtn {
	width: 150 rpx;
}

</style>

<template>
	<view class='flex bg-white align-center padding'>
		<view class='padding flex-sub text-center text-black text-lg text-bold'>
			{{ isToday ? "今日":Date}}习题
		</view>
	</view>

	<view wx:if='{{exerciseList.length != 0}}'>

		<view class='solid-bottom padding'>
			<view class='text-black text-xl text-bold text-cut'>
				{{ exerciseList[index].Etitle }}
			</view>
			<view class='flex margin'>
				<view class='flex-start cu-tag radius bg-green text-lg light'>
					{{ exerciseList[index].Egrade }}
				</view>
				<view class='flex-start cu-tag radius bg-brown text-lg light'>
					{{ exerciseList[index].Esubject }}
				</view>
			</view>
		</view>
		<view class='padding solid-bottom'>
			<view class='text-xl text-black text-bold'>
				题目描述: {{ exerciseList[index].Edescription }}
			</view>

			<view class='margin text-lg' wx:if="{{exerciseList[index].EnameTxt!=''}}">
				{{ exerciseList[index].EnameTxt }}
			</view>

			<name-image-list
				:imageList.sync='currentImageListOfName'
				type='show'
				showTitle='false'
			>
			</name-image-list>

			<audio
				author=''
				controls='true' name=''
				src="{{exerciseList[index].EaudioPath}}"
				wx:if="{{exerciseList[index].EaudioPath}}"
			></audio>

<!--			<block wx:if="{{exerciseList[index].EnamePath.length > 0}}">
				<block wx:if="{{exerciseList[index].Etype!=='听写'}}">
					<name-image-list
						:imageList.sync='currentImageListOfName'
						type='show'
					>
					</name-image-list>
				</block>
				<audio
					author=''
					controls='true' name=''
					src="{{exerciseList[index].EaudioPath}}"
					wx:else
				></audio>
			</block>-->
		</view>

		<view class='padding solid-bottom'>
			<view class='text-xl text-black text-bold'>
				作答
			</view>
<!--			<view class='margin text-lg' wx:if="{{hasAnswer && exerciseList[index].TEanswerTxt !== ''}}">
				{{ selectionAnswerIndex === null ? exerciseList[index].TEanswerTxt: selectionAnswerPicker[selectionAnswerIndex] }}
			</view>-->
			<block>
				<input class='input text-lg margin'
					   placeholder='请将答案填写在此处'
					   type='text'
					   value="{{exerciseList[index].TEanswerTxt}}"
					   @input='inputChange'
					   wx:if="{{!isSelectionType}}"
				/>
				<view class='cu-form-group' wx:else>
					<view class='title'>你的选项</view>
					<picker bindchange='inputChange' range='{{selectionAnswerPicker}}'
							value='{{selectionAnswerIndex}}'>
						<view class='picker'>
							<text class='text-lg'>{{ selectionAnswerIndex === null ? "请选择正确选项" : selectionAnswerPicker[selectionAnswerIndex] }}</text>
						</view>
					</picker>
				</view>
			</block>
			<image-list
				wx:if = "{{allowImageAnswer}}"
				:imageList.sync='currentImageListOfMyAnswer'
				@imageListChange.user='onImageListChange'
				:type.sync="imageListType"
			></image-list>
		</view>


		<view class='padding solid-bottom' wx:if="{{hasAnswer}}">
			<view class='text-xl text-black text-bold'>
				正确答案
			</view>
			<view class='margin text-lg'>
				{{exerciseList[index].EanswerTxt}}
			</view>
			<answer-image-list
				:imageList.sync='currentImageListOfAnswer'
				type='show'
			>
			</answer-image-list>
			<block wx:if="{{hasComment}}">
				<view class='text-xl text-black text-bold'>
					老师评价
				</view>
				<view class='margin text-lg'>
					{{ exerciseList[index].TEcomment }}
				</view>
			</block>
			<block wx:else>
				<view class='text-xl text-black text-bold'>
					尚无评价
				</view>
			</block>
		</view>

		<view class='flex padding'>
			<button class='flex-sub cu-btn bg-green shadow-blur round' @tap='clickLast()'>上一题</button>
			<button class='flex-sub margin-lr cu-btn bg-green shadow-blur round' @tap='clickSubmit()'>全部提交</button>
			<button class='flex-sub cu-btn bg-green shadow-blur round' @tap='clickNext()'>下一题</button>
		</view>

		<view class='flex padding justify-center text-lg text-bold'>
			{{ index + 1 }}/{{ exerciseList.length }}
		</view>

		<view class='flex padding'>
			<view class='flex-sub margin'></view>
			<button class='flex-twice margin cu-btn bg-pink shadow-blur round' @tap='clickAskQuestion'>提问老师</button>
<!--			<button class="flex-twice padding cu-btn bg-pink shadow-blur round" open-type="contact" bindcontact="handleContact" session-from="{{sessionFrom}}">提问老师</button>-->
			<view class='flex-sub margin'></view>
		</view>
	</view>

	<view class='margin padding' wx:else>
		<view class='flex justify-center text-bold text-lg'>今日没有题目</view>
	</view>
</template>

<script>
import wepy from 'wepy';
import ImageList from '@/components/image-list';
import { uploadImageList } from '@/common/uploadFile';
import moment from 'moment';
import { AUDIO_URL, IMAGE_OF_MY_ANSWER_URL, IMAGE_URL } from '@/common/url';
import { selectionAnswerRange, selectionConfigRange } from '@/common/constant';
import { IMAGE_OF_EXERCISE_URL } from '../common/url';
import { getSelectionText } from '../common/param-conversion';
import { AUTO_CORRECT } from '../common/constant';

const initialProps = {
	hasAnswer: false,
	hasComment: false,
	sessionFrom: "",
	allowImageAnswer: false,
}

const selectionProps = {
	isSelectionType: false,
	selectionAnswerIndex: null,
	selectionAnswerPicker: [],
}

export default class Exercise extends wepy.page {
	config = {
		usingComponents: {
			'mp-dialog': '/miniprogram_npm/weui-miniprogram/dialog/dialog',
			'mp-gallery': 'weui-miniprogram/gallery/gallery',
		}

	};

	components = {
		'image-list': ImageList,
		'name-image-list': ImageList,
		'answer-image-list': ImageList,
	};

	data = {
		Sid: null,
		Date: moment().format('YYYY-MM-DD'),
		isToday: true,
		exerciseList: [],
		index: 0,
		...initialProps,
		...selectionProps,
	};

	watch = {
		index(){
			this.computeStatus()
		},
		exerciseList(){
			this.computeStatus()
		}
	}

	computeStatus(){
		if(!this.exerciseList[this.index]){
			Object.assign(this, initialProps);
			Object.assign(this, selectionProps);
		}else{
			const {TEstatus, TEcomment, TEid, EautoCorrect, EtypeDetail, TEanswerTxt} = this.exerciseList[this.index];
			this.hasAnswer = TEstatus > 1;
			this.hasComment = TEcomment;
			this.sessionFrom = "exercise/" + TEid;
			this.allowImageAnswer = EautoCorrect === AUTO_CORRECT.MANUAL;
			if(EtypeDetail){
				let detail = JSON.parse(EtypeDetail);
				if(Array.isArray(detail) && detail.length >= 2){
					this.isSelectionType = true;
					this.selectionAnswerPicker = selectionAnswerRange[detail[1]].slice(0, selectionConfigRange[0][detail[0]]);
					console.log(this.selectionAnswerPicker);
					if(!TEanswerTxt){
						this.selectionAnswerIndex = null;
					}else{
						this.selectionAnswerIndex = TEanswerTxt;
					}
				}
			}else{
				Object.assign(this, selectionProps);
			}
		}
		this.$apply();
	}

	computed = {
		currentImageListOfMyAnswer(){
			let imageList = this.exerciseList[this.index] ? this.exerciseList[this.index].TEanswerPath : undefined;
			return typeof imageList === 'undefined' ? [] : imageList;
		},
		currentImageListOfName(){
			let imageList = this.exerciseList[this.index] ? this.exerciseList[this.index].EnamePath : undefined;
			return typeof imageList === 'undefined' ? [] : imageList;
		},
		currentImageListOfAnswer(){
			let imageList = this.exerciseList[this.index] ? this.exerciseList[this.index].EanswerPath : undefined;
			return typeof imageList === 'undefined' ? [] : imageList;
		},
		imageListType(){
			// return this.exerciseList[this.index] ? (this.exerciseList[this.index].TEstatus > 1 ? "show" : "add") : "add";
			return "add";
		}
	}

	methods = {
		clickLast() {
			let self = this;
			if (self.index !== 0) {
				self.index--;
			} else {
				wepy.showToast({
					title: '这是第一道题', //提示的内容,
					icon: 'none', //图标,
					duration: 2000, //延迟时间,
					mask: true, //显示透明蒙层，防止触摸穿透,
				});

			}
		},

		clickNext() {
			let self = this;
			if (self.index !== self.exerciseList.length - 1) {
				self.index++;
			} else {
				wepy.showToast({
					title: '已经是最后一题啦', //提示的内容,
					icon: 'none', //图标,
					duration: 2000, //延迟时间,
					mask: true, //显示透明蒙层，防止触摸穿透,
					success: res => {
					}
				});

			}
		},

		async clickSubmit() {
			let self = this;
			let incompleteExerciseKey = -1;
			// 检查题目是否全部完成
			for (const exerciseKey in self.exerciseList) {
				this.exerciseList[exerciseKey].TEanswerTxt = this.exerciseList[exerciseKey].TEanswerTxt.trim();
				const answer = this.exerciseList[exerciseKey].TEanswerTxt
				const imageListOfMyAnswer = this.exerciseList[exerciseKey].TEanswerPath
				if(!(self.exerciseList[exerciseKey].TEstatus > 1 || answer || (Array.isArray(imageListOfMyAnswer) && imageListOfMyAnswer.length > 0))){
					incompleteExerciseKey = exerciseKey;
					break;
				}
			}
			if (incompleteExerciseKey >= 0) {
				wx.showModal({
					showCancel: false,
					content: `第${Number(incompleteExerciseKey) + 1}道题尚未完成`,
					success(res) {
						if (res.confirm) {
							self.index = Number(incompleteExerciseKey);
							self.$apply();
						}
					}
				});
				return;
			}

			let changedExerciseList = [];
			for (let i = 0; i < self.exerciseList.length; i++) {
				const exercise = { ...self.exerciseList[i] };
				if(!exercise.changed){
					continue;
				}
				const imageList = exercise.TEanswerPath;
				if(Array.isArray(imageList) && imageList.length > 0){
					wx.showLoading({
						title: `图片答案上传中`,
					})
					const { imageUrlList, failedImageList } = await uploadImageList(imageList, "/my_answer");
					wx.hideLoading()
					if(failedImageList.length !== 0){
						console.log(imageUrlList, failedImageList)
						wx.showModal({
							showCancel: false,
							content: `第${Number(i) + 1}道题图片答案上传失败`,
							success(res) {
								if (res.confirm) {
									self.index = Number(i);
									self.$apply();
								}
							}
						})
						return;
					}else{
						exercise.TEanswerPath = imageUrlList.join(";");
					}
				}
				changedExerciseList.push(exercise);
			}
			if(changedExerciseList.length === 0){
				wx.showModal({
					showCancel: false,
					content: `无未提交作业`,
				})
				return;
			}
			wepy.request({
				url: wepy.$instance.globalData.serverUrl + '/app/today/submit_exercise',
				method: 'GET',
				data: {
					changedExerciseList
				},
				success: function(res) {
					wx.showToast({
						title: '提交成功'
					});
					self.getTodayExercise();
				}
			});
		},


		inputChange(e) {
			this.onAnswerChange();
			this.exerciseList[this.index].TEanswerTxt = e.detail.value;
		},

		onImageListChange(imageList){
			this.onAnswerChange();
			this.exerciseList[this.index].TEanswerPath = [...imageList];
		},
		clickAskQuestion() {
			wx.openCustomerServiceChat({
				extInfo: { url: 'https://work.weixin.qq.com/kfid/kfc48375989369e9d71' },
				corpId: 'wwac8eebae8391f2ad',
				success(res) {
				}
			})
		},
	};

	onAnswerChange(){
		this.exerciseList[this.index].changed = true;
	};

	getTodayExercise() {
		let self = this;
		wepy.request({
			url: wepy.$instance.globalData.serverUrl + '/app/today/get_exercise_with_date',
			data: {
				Sid: self.Sid,
				Date: self.Date,
			},
			method: 'GET',
			header: wepy.$instance.setHeader(),
			success: function(res) {
				if (res.data.Code !== 2 && res.data.Msg !== 'No exercise!' && Array.isArray(res.data.Data)) {
					self.exerciseList = res.data.Data.map((exercise) => {
						const {EnamePath, EanswerPath, TEanswerPath, Etype, EaudioPath} = exercise;
						exercise.EnamePath = EnamePath !== "" ?
							EnamePath.split(";").map(x => IMAGE_OF_EXERCISE_URL + x) : [];
						if(EaudioPath){
							exercise.EaudioPath = AUDIO_URL + EaudioPath;
						}
						exercise.EanswerPath = EanswerPath !== "" ? EanswerPath.split(";").map(x => IMAGE_OF_EXERCISE_URL + x) : [];
						exercise.TEanswerPath = TEanswerPath !== "" ? TEanswerPath.split(";").map(x => IMAGE_OF_MY_ANSWER_URL + x) : [];
						if(exercise.Etype === "选择题" && exercise.EtypeDetail){
							let selectionConfig = JSON.parse(exercise.EtypeDetail);
							// exercise.TEanswerTxt = getSelectionText(exercise.TEanswerTxt, selectionConfig);
							exercise.EanswerTxt = getSelectionText(exercise.EanswerTxt, selectionConfig);
						}
						return exercise
					});
					self.$apply();
				}
			}
		});
	}

	onLoad(options) {
		let self = this;

		self.Sid = options.sid;
		self.Date = options.date ? options.date : moment().format('YYYY-MM-DD');
		self.isToday = self.Date === moment().format('YYYY-MM-DD');
		self.getTodayExercise();
	}
}
</script>
